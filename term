#!/bin/bash
# a script to start my favorite terminal emulator

version=1.0
args=( )
execute=''
big=
case $(uname) in
  Darwin) term=iterm;;
  Linux)  term=urxvtc;;
esac

join_args () {
  # quote and join args into a string that can be evaled by the shell
  local new=''
  for arg in "${args[@]}"; do
    new="$new $(printf %q "$arg")"
  done
  args="$new"
}
iterm_wrapper () {
  # iTerm2.app on Mac OS X
  exec osascript -- Default "${args[@]}" <<-EOF
  on run argv

    -- set the default values
    set theSession to "Default"
    set theCommand to ""
    set theLength to length of argv

    -- Parse the command line.  The first argument is the Profile name in
    -- iTerm.  The rest is a command line to execute.
    if theLength >= 1
      set theSession to item 1 of argv
      if theLength >=2
	repeat with i from 2 to theLength
	  set theCommand to theCommand & " " & quoted form of item i of argv
	end repeat
      end if
    end if

    -- open iTerm and run the command
    tell application "iTerm" to tell current terminal
      launch session theSession
      if theCommand is not ""
	tell the last session to write text "exec " & theCommand
      end if
      activate
    end tell

  end run
	EOF
}
urxvt_wrapper () {
  exec urxvt ${big:+-fn "$(get_urxvt_font):size=17"} ${1:+-e} "${args[@]}"
}
urxvtc_wrapper () {
  # forks!
  urxvtc ${big:+-fn "$(get_urxvt_font):size=17"} ${1:+-e} "${args[@]}"
  if [ $? -eq 2 ]; then
    urxvtd -q -o -f
    urxvtc ${big:+-fn "$(get_urxvt_font):size=17"} ${1:+-e} "${args[@]}"
  fi
}
get_urxvt_font () {
  xrdb -query | sed -En 's/^urxvt\.font\s*:\s*(.*):size=[[:digit:]]+$/\1/ip'
}
xterm_wrapper () {
  if [ $# -eq 0 ]; then
    exec xterm
  else
    exec xterm -e "${args[@]}"
  fi
}
gnome_terminal_wrapper () {
  # TODO gnome-terminal forks!!
  join_args
  exec gnome-terminal ${1:+-e} "$args"
}

while getopts bhve:x opt; do
  case $opt in
    h)
      echo "term [-e args ...]"
      exit 0
      ;;
    v)
      echo "term -- Version $version (wrapping $term)"
      exit 0
      ;;
    e)
      execute=1
      args=("${args[@]}" "$OPTARG")
      shift $((OPTIND-1))
      for arg; do
	args=("${args[@]}" "$arg")
      done
      shift $#
      ;;
    b)
      big=1
      ;;
    x)
      set -x
      ;;
    *)
      ;;
  esac
done

${term}_wrapper $execute
