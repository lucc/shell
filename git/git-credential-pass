#!/usr/bin/env bash

# Use pass(1) as a git credential helper.  See git-credential(1).

version=0.1
prog="${0##*/}"

usage () {
  echo "Usage: $prog [-x] get"
  echo "       $prog -h"
  echo "       $prog -v"
}

help () {
  echo "Use pass as a credential helper for git."
}

while getopts hvx FLAG; do
  case $FLAG in
    h) usage; help; exit;;
    v) echo "$prog -- version $version"; exit;;
    x) set -x;;
    *) usage >&2; exit 2;;
  esac
done
shift $((OPTIND - 1))

if [ "$1" != get ]; then
  # This credential helper is read only.  All future extensions of the protocol
  # are ignored for now.
  exit
fi

host=
# First read input from stdin.  The input should be some variables especially
# "host".
while read -r line; do
  case "${line%%=*}" in
    protocol|host|path|username|url)
      var=${line%%=*}
      val=${line#*=}
      eval "$var='${val//\'/\'\\\'\'}'";;
    password) exit;; # This helper can only provide passwords so if it is
		     # present we are of no help.
    '');; # Ignore empty lines.
    *)
      echo "Error: Invalide line on stdin: $line" >&2
      exit 1
      ;;
  esac
done

cd "${PASSWORD_STORE_DIR:-~/.password-store}" || exit 3
shopt -s globstar
shopt -s nullglob
for file in **/*.gpg; do
  entry=${file%.gpg}
  if pass "$entry" | grep -qiEe "^(url|host)\s*[=:]+.*$host"; then
    pass "$entry" | sed --regexp-extended -n \
      -e '1s/^/password=/p' \
      -e '/^(name|user|username|login)\s*[=:]/s/^.*?[:=]\s*/username=/p'
    exit
  fi
done
