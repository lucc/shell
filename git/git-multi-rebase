#!/bin/zsh

# Rebase all local only branches on origin/master.

abort=0
exclude=(\*.bak \*.add)
include=()
upstream=origin/master
cmd=
verbose=0
retry=0

usage () {
  local prog="git ${${0##*/}#git-}"
  echo "$prog [-alnrx] [-i pattern] [-e pattern] [-u upstream] [-- git-rebase(1) options]"
  echo "$prog -h"
}

help () {
  cat <<EOF

Rebase all local branches on the same upstream branch.  Branches that have a
remote tracking branch are ignored as are branches matching the ignore
patterns.

Options:
-a		abort a rabase that fails (and continue with the next one)
-n		just print what would be done, don't do anything
-x		give shell debuging output
-l		populate the include list with all local branches (which don't
		have an upstream tracking branch)
-e pattern	add pattern to the list of excluded patterns, give the empty
		string as an argument to clear the list (default is $exclude)
-i pattern      add pattern to the list of included patterns, give the empty
		string as an argument to clear the list (default $include)
-u upstream	set the upstream branch for the rebase (default is $upstream)
-r 		use git-retry-rebase to retry a rebase that failed (impies -a)

Everything after "--" will be passed to git-rebase(1) as options.
EOF
}

check-pattern-list () {
  # $1 an array name, the array should contain patterns
  # $2 a string to test against every pattern in turn
  # returns 0 if any pattern matches, 1 otherwise
  local pattern
  for pattern in ${(P)1}; do
    if [[ $2 = ${~pattern} ]]; then
      return 0
    fi
  done
  return 1
}

find-branches () {
  git branch | cut -c 3-
}

find-local-branches () {
  # Populate the branches array.
  local branches=()
  local branch
  for branch in $(find-branches); do
    if git config --get branch.$branch.remote &>/dev/null; then
      # The branch has a remote tracking branch.
      continue
    else
      branches+=$branch
    fi
  done
  echo $branches
}

trap-handler () {
  trap - INT STOP HUP
  echo Caught signal.  Aborting all pending rebases. >&2
  git rebase --abort &>/dev/null
  return $((128 + $1))
}

# Parse the command line.
while getopts ae:hi:lnru:vx FLAG; do
  case $FLAG in
    a) abort=1;;
    h) usage; help; exit;;
    e) if [[ -z $OPTARG ]]; then exclude=(); else exclude+=$OPTARG; fi;;
    i) if [[ -z $OPTARG ]]; then include=(); else include+=$OPTARG; fi;;
    l) include+=( $(find-local-branches) );;
    n) cmd=echo;;
    r) retry=1 abort=1;;
    u) upstream=$OPTARG;;
    v) verbose=1;;
    x) set -x;;
    ?) usage; exit 2;;
  esac
done
shift $(($OPTIND-1))

exclude+=$upstream

if ((retry)) && ! [[ -x =git-retry-rebase ]]; then
  echo git-retry-rebase is not available. >&2
  retry=0
fi

branches=()
for branch in $(find-branches); do
  if check-pattern-list include $branch && \
      ! check-pattern-list exclude $branch; then
    branches+=$branch
  fi
done

# Save the current HEAD.
head=$(git rev-parse --abbrev-ref HEAD)

# Set up the trap.
trap trap-handler INT STOP HUP

failed=( )
quiet=${${abort/1/--quiet}/0}

# Do the actual rebasing.
for branch in ${(u)branches}; do
  ((verbose)) && echo Rebasing $branch on $upstream ...
  $cmd git rebase $quiet $@ $upstream $branch
  if (( $? != 0 && abort )) && [[ -z $cmd ]]; then
    ((verbose)) && echo Rebasing $branch on $upstream failed.  Aborting rebase.
    git rebase --abort
    ((retry)) && \
      git retry-rebase -u $upstream -b $branch -- $quiet $@
    (( $? != 0 )) && failed+=$branch
  fi
done

# Check out the saved HEAD.
$cmd git checkout $quiet $head 2>/dev/null

if [[ $#failed != 0 ]]; then
  echo The following branches could not be rebased:
  echo
  printf '%s\n' $failed | column
fi
